@namespace FlexMoney.Client.Shared.Dialogs
@using FlexMoney.Application.Features.Members.Commands.AddEdit
@using FlexMoney.Client.Infrastructure.Managers.Catalog.Member
@using FlexMoney.Shared.Constants.Application
@using Microsoft.AspNetCore.SignalR.Client
@inject Microsoft.Extensions.Localization.IStringLocalizer<IsDeletedConfirmation> localizer
<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Delete" Class="mr-3 mb-n1" />
            @localizer["Delete Confirmation"]
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudText>@ContentText</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@localizer["Cancel"]</MudButton>
        <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="SaveAsync">@localizer["Confirm"]</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Inject] private IMemberManager MemberManager { get; set; }
    [CascadingParameter] private HubConnection HubConnection { get; set; }
    [Parameter] public string ContentText { get; set; }
    [Parameter] public AddEditMemberCommand AddEditMemberModel { get; set; } = new();

    
    private async Task SaveAsync()
    {
        var response = await MemberManager.SaveAsync(AddEditMemberModel);
        if (response.Succeeded)
        {
            _snackBar.Add(response.Messages[0], Severity.Success);
            MudDialog.Close();
        }
        else
        {
            foreach (var message in response.Messages)
            {
                _snackBar.Add(message, Severity.Error);
            }
        }
        await HubConnection.SendAsync(ApplicationConstants.SignalR.SendUpdateDashboard);
    }
    void Submit()
    {
        MudDialog.Close(DialogResult.Ok(true));
    }
    void Cancel() => MudDialog.Cancel();
}